// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: portfolios.sql

package database

import (
	"context"
	"database/sql"
)

const createPortfolio = `-- name: CreatePortfolio :one
INSERT INTO portfolios (name, description, currency)
VALUES (?, ?, ?)
RETURNING id, name, description, currency, created_at, updated_at
`

type CreatePortfolioParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Currency    sql.NullString `json:"currency"`
}

func (q *Queries) CreatePortfolio(ctx context.Context, arg CreatePortfolioParams) (Portfolios, error) {
	row := q.db.QueryRowContext(ctx, createPortfolio, arg.Name, arg.Description, arg.Currency)
	var i Portfolios
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePortfolio = `-- name: DeletePortfolio :exec
DELETE FROM portfolios WHERE id = ?
`

func (q *Queries) DeletePortfolio(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePortfolio, id)
	return err
}

const getPortfolio = `-- name: GetPortfolio :one
SELECT id, name, description, currency, created_at, updated_at FROM portfolios WHERE id = ?
`

func (q *Queries) GetPortfolio(ctx context.Context, id int64) (Portfolios, error) {
	row := q.db.QueryRowContext(ctx, getPortfolio, id)
	var i Portfolios
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPortfolioStats = `-- name: GetPortfolioStats :one
SELECT 
    p.id,
    p.name,
    COUNT(h.id) as holding_count,
    COALESCE(SUM(h.quantity * h.average_cost_paisa), 0) as total_cost_paisa,
    COALESCE(SUM(h.quantity * COALESCE(h.last_price_paisa, h.average_cost_paisa)), 0) as total_value_paisa
FROM portfolios p
LEFT JOIN holdings h ON p.id = h.portfolio_id
WHERE p.id = ?
GROUP BY p.id, p.name
`

type GetPortfolioStatsRow struct {
	ID              int64       `json:"id"`
	Name            string      `json:"name"`
	HoldingCount    int64       `json:"holding_count"`
	TotalCostPaisa  interface{} `json:"total_cost_paisa"`
	TotalValuePaisa interface{} `json:"total_value_paisa"`
}

func (q *Queries) GetPortfolioStats(ctx context.Context, id int64) (GetPortfolioStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getPortfolioStats, id)
	var i GetPortfolioStatsRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.HoldingCount,
		&i.TotalCostPaisa,
		&i.TotalValuePaisa,
	)
	return i, err
}

const listPortfolios = `-- name: ListPortfolios :many
SELECT id, name, description, currency, created_at, updated_at FROM portfolios ORDER BY created_at DESC
`

func (q *Queries) ListPortfolios(ctx context.Context) ([]Portfolios, error) {
	rows, err := q.db.QueryContext(ctx, listPortfolios)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Portfolios{}
	for rows.Next() {
		var i Portfolios
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Currency,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePortfolio = `-- name: UpdatePortfolio :one
UPDATE portfolios 
SET name = ?, description = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, name, description, currency, created_at, updated_at
`

type UpdatePortfolioParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdatePortfolio(ctx context.Context, arg UpdatePortfolioParams) (Portfolios, error) {
	row := q.db.QueryRowContext(ctx, updatePortfolio, arg.Name, arg.Description, arg.ID)
	var i Portfolios
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
