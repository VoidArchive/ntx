// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: holdings.sql

package database

import (
	"context"
	"database/sql"
)

const createHolding = `-- name: CreateHolding :one
INSERT INTO holdings (portfolio_id, symbol, quantity, average_cost_paisa, last_price_paisa)
VALUES (?, ?, ?, ?, ?)
RETURNING id, portfolio_id, symbol, quantity, average_cost_paisa, last_price_paisa, created_at, updated_at
`

type CreateHoldingParams struct {
	PortfolioID      int64         `json:"portfolio_id"`
	Symbol           string        `json:"symbol"`
	Quantity         int64         `json:"quantity"`
	AverageCostPaisa int64         `json:"average_cost_paisa"`
	LastPricePaisa   sql.NullInt64 `json:"last_price_paisa"`
}

func (q *Queries) CreateHolding(ctx context.Context, arg CreateHoldingParams) (Holdings, error) {
	row := q.db.QueryRowContext(ctx, createHolding,
		arg.PortfolioID,
		arg.Symbol,
		arg.Quantity,
		arg.AverageCostPaisa,
		arg.LastPricePaisa,
	)
	var i Holdings
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.Symbol,
		&i.Quantity,
		&i.AverageCostPaisa,
		&i.LastPricePaisa,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteHolding = `-- name: DeleteHolding :exec
DELETE FROM holdings WHERE id = ?
`

func (q *Queries) DeleteHolding(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteHolding, id)
	return err
}

const getHolding = `-- name: GetHolding :one
SELECT id, portfolio_id, symbol, quantity, average_cost_paisa, last_price_paisa, created_at, updated_at FROM holdings WHERE id = ?
`

func (q *Queries) GetHolding(ctx context.Context, id int64) (Holdings, error) {
	row := q.db.QueryRowContext(ctx, getHolding, id)
	var i Holdings
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.Symbol,
		&i.Quantity,
		&i.AverageCostPaisa,
		&i.LastPricePaisa,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getHoldingBySymbol = `-- name: GetHoldingBySymbol :one
SELECT id, portfolio_id, symbol, quantity, average_cost_paisa, last_price_paisa, created_at, updated_at FROM holdings WHERE portfolio_id = ? AND symbol = ?
`

type GetHoldingBySymbolParams struct {
	PortfolioID int64  `json:"portfolio_id"`
	Symbol      string `json:"symbol"`
}

func (q *Queries) GetHoldingBySymbol(ctx context.Context, arg GetHoldingBySymbolParams) (Holdings, error) {
	row := q.db.QueryRowContext(ctx, getHoldingBySymbol, arg.PortfolioID, arg.Symbol)
	var i Holdings
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.Symbol,
		&i.Quantity,
		&i.AverageCostPaisa,
		&i.LastPricePaisa,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getHoldingValue = `-- name: GetHoldingValue :one
SELECT 
    h.id, h.portfolio_id, h.symbol, h.quantity, h.average_cost_paisa, h.last_price_paisa, h.created_at, h.updated_at,
    (h.quantity * h.average_cost_paisa) as total_cost_paisa,
    (h.quantity * COALESCE(h.last_price_paisa, h.average_cost_paisa)) as total_value_paisa,
    (h.quantity * COALESCE(h.last_price_paisa, h.average_cost_paisa)) - (h.quantity * h.average_cost_paisa) as unrealized_pnl_paisa
FROM holdings h
WHERE h.id = ?
`

type GetHoldingValueRow struct {
	ID                 int64         `json:"id"`
	PortfolioID        int64         `json:"portfolio_id"`
	Symbol             string        `json:"symbol"`
	Quantity           int64         `json:"quantity"`
	AverageCostPaisa   int64         `json:"average_cost_paisa"`
	LastPricePaisa     sql.NullInt64 `json:"last_price_paisa"`
	CreatedAt          sql.NullTime  `json:"created_at"`
	UpdatedAt          sql.NullTime  `json:"updated_at"`
	TotalCostPaisa     interface{}   `json:"total_cost_paisa"`
	TotalValuePaisa    interface{}   `json:"total_value_paisa"`
	UnrealizedPnlPaisa int64         `json:"unrealized_pnl_paisa"`
}

func (q *Queries) GetHoldingValue(ctx context.Context, id int64) (GetHoldingValueRow, error) {
	row := q.db.QueryRowContext(ctx, getHoldingValue, id)
	var i GetHoldingValueRow
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.Symbol,
		&i.Quantity,
		&i.AverageCostPaisa,
		&i.LastPricePaisa,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TotalCostPaisa,
		&i.TotalValuePaisa,
		&i.UnrealizedPnlPaisa,
	)
	return i, err
}

const listHoldingsByPortfolio = `-- name: ListHoldingsByPortfolio :many
SELECT id, portfolio_id, symbol, quantity, average_cost_paisa, last_price_paisa, created_at, updated_at FROM holdings WHERE portfolio_id = ? ORDER BY symbol
`

func (q *Queries) ListHoldingsByPortfolio(ctx context.Context, portfolioID int64) ([]Holdings, error) {
	rows, err := q.db.QueryContext(ctx, listHoldingsByPortfolio, portfolioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Holdings{}
	for rows.Next() {
		var i Holdings
		if err := rows.Scan(
			&i.ID,
			&i.PortfolioID,
			&i.Symbol,
			&i.Quantity,
			&i.AverageCostPaisa,
			&i.LastPricePaisa,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHoldingsWithValue = `-- name: ListHoldingsWithValue :many
SELECT 
    h.id, h.portfolio_id, h.symbol, h.quantity, h.average_cost_paisa, h.last_price_paisa, h.created_at, h.updated_at,
    (h.quantity * h.average_cost_paisa) as total_cost_paisa,
    (h.quantity * COALESCE(h.last_price_paisa, h.average_cost_paisa)) as total_value_paisa,
    (h.quantity * COALESCE(h.last_price_paisa, h.average_cost_paisa)) - (h.quantity * h.average_cost_paisa) as unrealized_pnl_paisa
FROM holdings h
WHERE h.portfolio_id = ?
ORDER BY h.symbol
`

type ListHoldingsWithValueRow struct {
	ID                 int64         `json:"id"`
	PortfolioID        int64         `json:"portfolio_id"`
	Symbol             string        `json:"symbol"`
	Quantity           int64         `json:"quantity"`
	AverageCostPaisa   int64         `json:"average_cost_paisa"`
	LastPricePaisa     sql.NullInt64 `json:"last_price_paisa"`
	CreatedAt          sql.NullTime  `json:"created_at"`
	UpdatedAt          sql.NullTime  `json:"updated_at"`
	TotalCostPaisa     interface{}   `json:"total_cost_paisa"`
	TotalValuePaisa    interface{}   `json:"total_value_paisa"`
	UnrealizedPnlPaisa int64         `json:"unrealized_pnl_paisa"`
}

func (q *Queries) ListHoldingsWithValue(ctx context.Context, portfolioID int64) ([]ListHoldingsWithValueRow, error) {
	rows, err := q.db.QueryContext(ctx, listHoldingsWithValue, portfolioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListHoldingsWithValueRow{}
	for rows.Next() {
		var i ListHoldingsWithValueRow
		if err := rows.Scan(
			&i.ID,
			&i.PortfolioID,
			&i.Symbol,
			&i.Quantity,
			&i.AverageCostPaisa,
			&i.LastPricePaisa,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalCostPaisa,
			&i.TotalValuePaisa,
			&i.UnrealizedPnlPaisa,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHolding = `-- name: UpdateHolding :one
UPDATE holdings 
SET quantity = ?, average_cost_paisa = ?, last_price_paisa = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, portfolio_id, symbol, quantity, average_cost_paisa, last_price_paisa, created_at, updated_at
`

type UpdateHoldingParams struct {
	Quantity         int64         `json:"quantity"`
	AverageCostPaisa int64         `json:"average_cost_paisa"`
	LastPricePaisa   sql.NullInt64 `json:"last_price_paisa"`
	ID               int64         `json:"id"`
}

func (q *Queries) UpdateHolding(ctx context.Context, arg UpdateHoldingParams) (Holdings, error) {
	row := q.db.QueryRowContext(ctx, updateHolding,
		arg.Quantity,
		arg.AverageCostPaisa,
		arg.LastPricePaisa,
		arg.ID,
	)
	var i Holdings
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.Symbol,
		&i.Quantity,
		&i.AverageCostPaisa,
		&i.LastPricePaisa,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateHoldingPrice = `-- name: UpdateHoldingPrice :exec
UPDATE holdings 
SET last_price_paisa = ?, updated_at = CURRENT_TIMESTAMP
WHERE portfolio_id = ? AND symbol = ?
`

type UpdateHoldingPriceParams struct {
	LastPricePaisa sql.NullInt64 `json:"last_price_paisa"`
	PortfolioID    int64         `json:"portfolio_id"`
	Symbol         string        `json:"symbol"`
}

func (q *Queries) UpdateHoldingPrice(ctx context.Context, arg UpdateHoldingPriceParams) error {
	_, err := q.db.ExecContext(ctx, updateHoldingPrice, arg.LastPricePaisa, arg.PortfolioID, arg.Symbol)
	return err
}
